---
title: "galactic_data_manipulation"
author: "kaRani"
format: html
editor: visual
---

# The Force of dplyr: Navigating Star Wars Data 🌟 💣

In this project, I will harness the power of star wars data which comes with dplyr package which is part of the tidyverse and perform awesome galactic data manipulation and rise to be the data jedi.

### Objectives:

-   Creating filtered tables from the star wars data
-   Joining data sets
-   Performing mutating joins
-   Looking at filtering joins
-   Set operators
-   Binding tables

```{r}
#| echo: false
# load the packages to use

library(dplyr)
library(ggplot2)
library(tidyr)
library(magrittr)

```

View our the starwars data set we are to use

```{r}
View(starwars)

#take a quick peek at the data
glimpse(starwars)

#explore its structure
str(starwars)

```

#### Data dictionary (from R documention using the ?starwars) 🚀

Star wars characters Description The original data, from SWAPI, the Star Wars API, https://swapi.py4e.com/, has been revised to reflect additional research into gender and sex determinations of characters.

Format A tibble with 87 rows and 14 variable:

1\. name: name of the character

2\. height: Height(cm)

3\. mass: weight(Kg)

4.  hair_color, skin_color, hair, skin and eye colors

5\. birth_year: Year born(BBY = Before Battle Yavin)

6.  sex: The biological sex of the character, namely: name, female, hermaphroditic, or none(as in the case of Droids)

7\. gender: The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids)

8.  home world: Name of home world

9\. species: Name of species

10\. films: List of films the character appeared in

11\. vehicles: List of vehicles the character has piloted

12\. star ships: List of star ships the character has piloted

#### Obj_01: Creating filtered tables from the star wars data

create a couple of filtered tables from the star wars data set which come with the dplyr package

```{r}
# first data set 
human_droids <- starwars |> 
  filter(species %in% c("Human", "Droid")) |> 
  select(name, homeworld) |> 
  print()
  

# second data set
humans <- starwars |> 
  filter(species == "Human") |> 
  select(name, species) |> 
  print()

```

#### Obj_02:Joining data sets

The syntax for joins in dplyr works the same as for other tidyverse verbs You can either use form:

1.verb(data1, data2) or

2\. the pipe: data1 \|\> verb(data2) 😁

```{r}
#both option give the same output but using the pipe operator makes it neateR
inner_join(human_droids, humans)

# alternatively
human_droids |> 
  inner_join(humans)
```

#### 💡 Pointer

::: callout-caution
##### it’s important to note two key practices when joining data

First, be careful when joining on missing data. Since missing values can match with other missing values, this can unintentionally create one-to-many or many-to-many relationships. Additionally, if missing data is not consistent across tables, it can lead to unintended row matches

Second, try to avoid many-to-many joins. This occurs when the join column has duplicate values in both tables. In such cases, every row can match with multiple rows from the other table, significantly increasing the size of the resulting dataset. For example, if there are 10 duplicates in the join column of each table, the final result could expand to 100 rows (10x10)
:::

```{r}
# joinig NAs
inner_join(starwars |> 
  filter(name == "C-3PO") |> 
  select(name:hair_color), 
  starwars, by = "hair_color")


# many-many joins
inner_join(starwars, starwars, by = "species")


```

::: {.callout-note appearance="simple"}
#### ✔️ Good practice

When your join key has the same name in both tables it's good practice to do so with by = " "

```         
inner_join(humans, humans_droids, by="name")
```
:::

#### Obj_03: Performing mutating joins

**inner_join()** tells dplyr to only returns rows that are a match in tables to use and in which order. The first table,aka the 'left table' or 'table x' in our case the 'human_droids' table and the second table aka the 'right table' or 'table y' is 'humans' table.

When we inner_join() the two tables, we get a data set that has all the rows from 'humans' data set, since all the rows from 'humans' are in 'humans_droids', and we gain an extra column 'species'.

```{r}
# inner_join
human_droids |> 
  inner_join(humans)

```

**left_join()** This approach retains all rows and columns from the first dataset while adding any new columns from the second dataset. When there’s a match on the join key, the corresponding values from the second dataset are added to the new columns. If there’s no match, the original row from the first dataset is preserved, and the new columns are filled with missing/NA values to indicate the absence of a match in the second dataset.

```{r}
# left_join()
human_droids |> 
  left_join(humans)

```

full_join() function, as its name implies, merges two tables completely. Unlike previous joins that retained only matching rows, full_join preserves all rows and columns from both tables. Since all the data from both tables is included, the distinction between the left and right tables becomes irrelevant.

```{r}
# full_join()

human_droids |> 
  full_join(humans, by = "name")

```

An interesting feature of full_join is that it can be adapted to perform a Cartesian or cross join. To achieve this, you use full_join as usual but set the by argument to character()

```{r}

human_droids |> 
  full_join(humans, by = character())

```

Imagine we want to compare how similar each character's name is to every other character's. As we learned earlier, a cross join will generate every possible pairing of character names, resulting in 1,225 combinations. From there, we can calculate the edit distance between the names, remove duplicate pairs, and sort the results accordingly

```{r}
human_droids |> 
  full_join(humans, by = character()) |> 
  select(name.x, name.y) |> 
  filter(name.x != name.y) |> 
  rowwise() |> 
  mutate(leven_dist = adist(name.x, name.y, ignore = T)[1],
         key = paste(sort(c(name.x, name.y)), collapse = "<-->")) |> 
  distinct(key, .keep_all = T) |> 
  select(key, leven_dist) |> 
  arrange(leven_dist)
  
```

Observation: top 10 unique name pairings that are the most similar to each other
